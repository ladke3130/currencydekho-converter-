{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sai\\\\Desktop\\\\currency converter app\\\\src\\\\components\\\\Navbar\\\\Navbar.jsx\",\n  _s = $RefreshSig$();\nimport { Box, Flex, HStack,\n//   Link,\nIconButton, useDisclosure, useColorMode, useColorModeValue, Stack, Button } from \"@chakra-ui/react\";\nimport { HamburgerIcon, CloseIcon, MoonIcon, SunIcon } from \"@chakra-ui/icons\";\nimport logo from \"./../../assets/logo.png\";\nimport \"./navbar.css\";\n\n//         key={link.children}>\n//         {link.children}\n//     </Link>\n// );\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Navbar() {\n  _s();\n  const {\n    colorMode,\n    toggleColorMode\n  } = useColorMode();\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      bg: useColorModeValue(\"gray.100\", \"gray.900\"),\n      px: 4,\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        h: 16,\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"logo\",\n            src: logo,\n            alt: \"logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HStack, {\n          spacing: 8,\n          alignItems: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: toggleColorMode,\n            children: colorMode === \"light\" ? /*#__PURE__*/_jsxDEV(MoonIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 40\n            }, this) : /*#__PURE__*/_jsxDEV(SunIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 55\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          size: \"md\",\n          icon: isOpen ? /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 28\n          }, this) : /*#__PURE__*/_jsxDEV(HamburgerIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 44\n          }, this),\n          \"aria-label\": \"Open Menu\",\n          display: {\n            md: \"none\"\n          },\n          onClick: isOpen ? onClose : onOpen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), isOpen ? /*#__PURE__*/_jsxDEV(Box, {\n        pb: 4,\n        display: {\n          md: \"none\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          as: \"nav\",\n          spacing: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Navbar, \"5f3uIzPNjLm9xyWqblURLuW/o6s=\", false, function () {\n  return [useColorMode, useDisclosure, useColorModeValue];\n});\n_c = Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["Box","Flex","HStack","IconButton","useDisclosure","useColorMode","useColorModeValue","Stack","Button","HamburgerIcon","CloseIcon","MoonIcon","SunIcon","logo","Navbar","colorMode","toggleColorMode","isOpen","onOpen","onClose","md"],"sources":["C:/Users/sai/Desktop/currency converter app/src/components/Navbar/Navbar.jsx"],"sourcesContent":["import {\n  Box,\n  Flex,\n  HStack,\n  //   Link,\n  IconButton,\n  useDisclosure,\n  useColorMode,\n  useColorModeValue,\n  Stack,\n  Button,\n} from \"@chakra-ui/react\";\nimport { HamburgerIcon, CloseIcon, MoonIcon, SunIcon } from \"@chakra-ui/icons\";\nimport logo from \"./../../assets/logo.png\";\nimport \"./navbar.css\";\n\n\n//         key={link.children}>\n//         {link.children}\n//     </Link>\n// );\n\nexport default function Navbar() {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Box bg={useColorModeValue(\"gray.100\", \"gray.900\")} px={4}>\n        <Flex h={16} alignItems={\"center\"} justifyContent={\"space-between\"}>\n          <Box>\n            <img className=\"logo\" src={logo} alt=\"logo\" />\n          </Box>\n\n          <HStack spacing={8} alignItems={\"center\"}>\n            {/* <HStack\n              as={\"nav\"}\n              spacing={4}\n              display={{ base: \"none\", md: \"flex\" }}\n            >\n              {Links.map((link) => (\n                <NavLink key={link}>{link}</NavLink>\n              ))}\n            </HStack> */}\n            <Button onClick={toggleColorMode}>\n              {colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\n            </Button>\n          </HStack>\n\n          <IconButton\n            size={\"md\"}\n            icon={isOpen ? <CloseIcon /> : <HamburgerIcon />}\n            aria-label={\"Open Menu\"}\n            display={{ md: \"none\" }}\n            onClick={isOpen ? onClose : onOpen}\n          />\n        </Flex>\n\n        {isOpen ? (\n          <Box pb={4} display={{ md: \"none\" }}>\n            <Stack as={\"nav\"} spacing={4}>\n              {/* {Links.map((link) => (\n                <NavLink key={link}>{link}</NavLink>\n              ))} */}\n            </Stack>\n          </Box>\n        ) : null}\n      </Box>\n    </>\n  );\n}\n"],"mappings":";;AAAA,SACEA,GAAG,EACHC,IAAI,EACJC,MAAM;AACN;AACAC,UAAU,EACVC,aAAa,EACbC,YAAY,EACZC,iBAAiB,EACjBC,KAAK,EACLC,MAAM,QACD,kBAAkB;AACzB,SAASC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,kBAAkB;AAC9E,OAAOC,IAAI,MAAM,yBAAyB;AAC1C,OAAO,cAAc;;AAGrB;AACA;AACA;AACA;AAAA;AAAA;AAEA,eAAe,SAASC,MAAM,GAAG;EAAA;EAC/B,MAAM;IAAEC,SAAS;IAAEC;EAAgB,CAAC,GAAGX,YAAY,EAAE;EACrD,MAAM;IAAEY,MAAM;IAAEC,MAAM;IAAEC;EAAQ,CAAC,GAAGf,aAAa,EAAE;EAEnD,oBACE;IAAA,uBACE,QAAC,GAAG;MAAC,EAAE,EAAEE,iBAAiB,CAAC,UAAU,EAAE,UAAU,CAAE;MAAC,EAAE,EAAE,CAAE;MAAA,wBACxD,QAAC,IAAI;QAAC,CAAC,EAAE,EAAG;QAAC,UAAU,EAAE,QAAS;QAAC,cAAc,EAAE,eAAgB;QAAA,wBACjE,QAAC,GAAG;UAAA,uBACF;YAAK,SAAS,EAAC,MAAM;YAAC,GAAG,EAAEO,IAAK;YAAC,GAAG,EAAC;UAAM;YAAA;YAAA;YAAA;UAAA;QAAG;UAAA;UAAA;UAAA;QAAA,QAC1C,eAEN,QAAC,MAAM;UAAC,OAAO,EAAE,CAAE;UAAC,UAAU,EAAE,QAAS;UAAA,uBAUvC,QAAC,MAAM;YAAC,OAAO,EAAEG,eAAgB;YAAA,UAC9BD,SAAS,KAAK,OAAO,gBAAG,QAAC,QAAQ;cAAA;cAAA;cAAA;YAAA,QAAG,gBAAG,QAAC,OAAO;cAAA;cAAA;cAAA;YAAA;UAAG;YAAA;YAAA;YAAA;UAAA;QAC5C;UAAA;UAAA;UAAA;QAAA,QACF,eAET,QAAC,UAAU;UACT,IAAI,EAAE,IAAK;UACX,IAAI,EAAEE,MAAM,gBAAG,QAAC,SAAS;YAAA;YAAA;YAAA;UAAA,QAAG,gBAAG,QAAC,aAAa;YAAA;YAAA;YAAA;UAAA,QAAI;UACjD,cAAY,WAAY;UACxB,OAAO,EAAE;YAAEG,EAAE,EAAE;UAAO,CAAE;UACxB,OAAO,EAAEH,MAAM,GAAGE,OAAO,GAAGD;QAAO;UAAA;UAAA;UAAA;QAAA,QACnC;MAAA;QAAA;QAAA;QAAA;MAAA,QACG,EAEND,MAAM,gBACL,QAAC,GAAG;QAAC,EAAE,EAAE,CAAE;QAAC,OAAO,EAAE;UAAEG,EAAE,EAAE;QAAO,CAAE;QAAA,uBAClC,QAAC,KAAK;UAAC,EAAE,EAAE,KAAM;UAAC,OAAO,EAAE;QAAE;UAAA;UAAA;UAAA;QAAA;MAIrB;QAAA;QAAA;QAAA;MAAA,QACJ,GACJ,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA;EACJ,iBACL;AAEP;AAAC,GAhDuBN,MAAM;EAAA,QACWT,YAAY,EACfD,aAAa,EAIpCE,iBAAiB;AAAA;AAAA,KANRQ,MAAM;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}